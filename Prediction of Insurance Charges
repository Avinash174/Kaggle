{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2462f2c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:46.131833Z",
     "iopub.status.busy": "2025-03-29T17:42:46.131424Z",
     "iopub.status.idle": "2025-03-29T17:42:48.917609Z",
     "shell.execute_reply": "2025-03-29T17:42:48.916561Z"
    },
    "id": "4saxHq2knrTE",
    "papermill": {
     "duration": 2.793379,
     "end_time": "2025-03-29T17:42:48.919452",
     "exception": false,
     "start_time": "2025-03-29T17:42:46.126073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "afa1bb5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:48.929020Z",
     "iopub.status.busy": "2025-03-29T17:42:48.928371Z",
     "iopub.status.idle": "2025-03-29T17:42:48.971549Z",
     "shell.execute_reply": "2025-03-29T17:42:48.970429Z"
    },
    "id": "xc_y6U9hnrTE",
    "outputId": "98742936-0551-4c7b-dec8-b666b413767d",
    "papermill": {
     "duration": 0.049693,
     "end_time": "2025-03-29T17:42:48.973292",
     "exception": false,
     "start_time": "2025-03-29T17:42:48.923599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  age     sex     bmi  children smoker     region      charges\n",
       "0      0   19  female  27.900         0    yes  southwest  16884.92400\n",
       "1      1   18    male  33.770         1     no  southeast   1725.55230\n",
       "2      2   28    male  33.000         3     no  southeast   4449.46200\n",
       "3      3   33    male  22.705         0     no  northwest  21984.47061\n",
       "4      4   32    male  28.880         0     no  northwest   3866.85520"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"/kaggle/input/prediction-of-insurance-charges-using-age-gender/insurance.csv\")\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6b954b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:48.982640Z",
     "iopub.status.busy": "2025-03-29T17:42:48.982305Z",
     "iopub.status.idle": "2025-03-29T17:42:48.987745Z",
     "shell.execute_reply": "2025-03-29T17:42:48.986753Z"
    },
    "id": "U9KvRkyvpyPZ",
    "outputId": "dd940af6-ead5-4abb-e380-eb9763c53893",
    "papermill": {
     "duration": 0.011912,
     "end_time": "2025-03-29T17:42:48.989325",
     "exception": false,
     "start_time": "2025-03-29T17:42:48.977413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f2b22e41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:48.998470Z",
     "iopub.status.busy": "2025-03-29T17:42:48.998155Z",
     "iopub.status.idle": "2025-03-29T17:42:49.005312Z",
     "shell.execute_reply": "2025-03-29T17:42:49.004282Z"
    },
    "id": "RiQIYE8op1ga",
    "outputId": "865ac432-9315-4039-d25a-ab2e3bbe7789",
    "papermill": {
     "duration": 0.013585,
     "end_time": "2025-03-29T17:42:49.006965",
     "exception": false,
     "start_time": "2025-03-29T17:42:48.993380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10704"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6a0039f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.016382Z",
     "iopub.status.busy": "2025-03-29T17:42:49.016042Z",
     "iopub.status.idle": "2025-03-29T17:42:49.021507Z",
     "shell.execute_reply": "2025-03-29T17:42:49.020577Z"
    },
    "id": "_0hnB_Osp3aW",
    "outputId": "73a8c126-b5a2-4788-97fe-584e913bce2d",
    "papermill": {
     "duration": 0.011798,
     "end_time": "2025-03-29T17:42:49.023041",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.011243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['index', 'age', 'sex', 'bmi', 'children', 'smoker', 'region',\n",
       "       'charges'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cb901ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.033246Z",
     "iopub.status.busy": "2025-03-29T17:42:49.032894Z",
     "iopub.status.idle": "2025-03-29T17:42:49.056766Z",
     "shell.execute_reply": "2025-03-29T17:42:49.055408Z"
    },
    "id": "nQQRqqkvsXJU",
    "outputId": "ab02916b-56cf-41cb-e35e-284bb1aa49cb",
    "papermill": {
     "duration": 0.030755,
     "end_time": "2025-03-29T17:42:49.058496",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.027741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1338 entries, 0 to 1337\n",
      "Data columns (total 8 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   index     1338 non-null   int64  \n",
      " 1   age       1338 non-null   int64  \n",
      " 2   sex       1338 non-null   object \n",
      " 3   bmi       1338 non-null   float64\n",
      " 4   children  1338 non-null   int64  \n",
      " 5   smoker    1338 non-null   object \n",
      " 6   region    1338 non-null   object \n",
      " 7   charges   1338 non-null   float64\n",
      "dtypes: float64(2), int64(3), object(3)\n",
      "memory usage: 83.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "191880b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.068777Z",
     "iopub.status.busy": "2025-03-29T17:42:49.068424Z",
     "iopub.status.idle": "2025-03-29T17:42:49.075065Z",
     "shell.execute_reply": "2025-03-29T17:42:49.074124Z"
    },
    "id": "mA2NPegMsbHO",
    "outputId": "5c39f17e-de23-4402-f63f-aa9e5a822c6e",
    "papermill": {
     "duration": 0.013391,
     "end_time": "2025-03-29T17:42:49.076596",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.063205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index         int64\n",
       "age           int64\n",
       "sex          object\n",
       "bmi         float64\n",
       "children      int64\n",
       "smoker       object\n",
       "region       object\n",
       "charges     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "92485a0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.087076Z",
     "iopub.status.busy": "2025-03-29T17:42:49.086694Z",
     "iopub.status.idle": "2025-03-29T17:42:49.109566Z",
     "shell.execute_reply": "2025-03-29T17:42:49.108580Z"
    },
    "id": "7rkJoGa5p9wh",
    "outputId": "fd171465-9d61-4e0e-889a-15b9b120f613",
    "papermill": {
     "duration": 0.029837,
     "end_time": "2025-03-29T17:42:49.111094",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.081257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>39.207025</td>\n",
       "      <td>30.663397</td>\n",
       "      <td>1.094918</td>\n",
       "      <td>13270.422265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>386.391641</td>\n",
       "      <td>14.049960</td>\n",
       "      <td>6.098187</td>\n",
       "      <td>1.205493</td>\n",
       "      <td>12110.011237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>15.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1121.873900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>334.250000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>26.296250</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4740.287150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>30.400000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9382.033000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1002.750000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>34.693750</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>16639.912515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1337.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>53.130000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>63770.428010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             index          age          bmi     children       charges\n",
       "count  1338.000000  1338.000000  1338.000000  1338.000000   1338.000000\n",
       "mean    668.500000    39.207025    30.663397     1.094918  13270.422265\n",
       "std     386.391641    14.049960     6.098187     1.205493  12110.011237\n",
       "min       0.000000    18.000000    15.960000     0.000000   1121.873900\n",
       "25%     334.250000    27.000000    26.296250     0.000000   4740.287150\n",
       "50%     668.500000    39.000000    30.400000     1.000000   9382.033000\n",
       "75%    1002.750000    51.000000    34.693750     2.000000  16639.912515\n",
       "max    1337.000000    64.000000    53.130000     5.000000  63770.428010"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4a9b9d2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.122414Z",
     "iopub.status.busy": "2025-03-29T17:42:49.122090Z",
     "iopub.status.idle": "2025-03-29T17:42:49.129483Z",
     "shell.execute_reply": "2025-03-29T17:42:49.128535Z"
    },
    "id": "rt5MNQqxnrTG",
    "outputId": "b7c3efc0-7982-42fb-8cc5-dfad5020d6f2",
    "papermill": {
     "duration": 0.015009,
     "end_time": "2025-03-29T17:42:49.131059",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.116050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index       0\n",
       "age         0\n",
       "sex         0\n",
       "bmi         0\n",
       "children    0\n",
       "smoker      0\n",
       "region      0\n",
       "charges     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4999d2dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.142206Z",
     "iopub.status.busy": "2025-03-29T17:42:49.141841Z",
     "iopub.status.idle": "2025-03-29T17:42:49.149972Z",
     "shell.execute_reply": "2025-03-29T17:42:49.149015Z"
    },
    "id": "HiK1ZKWsnrTG",
    "outputId": "18835dea-131f-4fce-be1e-e8c28cec04ab",
    "papermill": {
     "duration": 0.015764,
     "end_time": "2025-03-29T17:42:49.151875",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.136111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8b363994",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.164222Z",
     "iopub.status.busy": "2025-03-29T17:42:49.163887Z",
     "iopub.status.idle": "2025-03-29T17:42:49.892702Z",
     "shell.execute_reply": "2025-03-29T17:42:49.891353Z"
    },
    "id": "uVYgydaAqDhM",
    "outputId": "bd5c25f2-5541-4940-ac6c-4de664d1bc78",
    "papermill": {
     "duration": 0.737267,
     "end_time": "2025-03-29T17:42:49.894374",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.157107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGdCAYAAACyzRGfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWWUlEQVR4nO3df2xdBfn48eeWbr2VrXdsQsuyDmdEN8QpDNwqaMysLoshsDWKBCOSRSIpU9YYtYmCGmVookNiN4QsQxP3me6PqTPpiKlxxrjyo4RvUJKJSrJqaVHD2rHYbtL7/YPQj1Xkw92657bd65WcpD3n9Ozpbpr7zjnn3lsol8vlAABIUlPtAQCAs4v4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABS1VZ7gH83Pj4eAwMDMX/+/CgUCtUeBwB4Dcrlchw7diwWL14cNTWvfm5j2sXHwMBANDc3V3sMAOAU9Pf3x5IlS151n2kXH/Pnz4+Il4ZvaGio8jQAwGsxMjISzc3NE8/jr2baxcfLl1oaGhrEBwDMMK/llgk3nAIAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqabdZ7vAVCqXyzE6OlrtMYiXHouxsbGIiKirq3tNn/9AjmKx6PEglfhgVhsdHY3169dXewyY1rq7u6O+vr7aY3AWcdkFAEjlzAezWrFYjO7u7mqPQbx0FmrDhg0REbFv374oFotVnoiXeSzIJj6Y1QqFgtPJ01CxWPS4wFnMZRcAIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIJX4AABSiQ8AIFXF8fGXv/wlPvrRj8aiRYuivr4+3va2t8Vjjz02sb1cLscdd9wRF154YdTX10dra2s8/fTTUzo0ADBzVRQfzz//fFx11VUxZ86c6O7ujqeeeiq++c1vxnnnnTexzze+8Y24995747777ouHH344zj333Fi3bl2Mjo5O+fAAwMxTW8nOX//616O5uTl27do1sW7ZsmUTX5fL5bjnnnviC1/4Qlx77bUREfH9738/Ghsb48c//nF85CMfmaKxAYCZqqIzHz/96U/jiiuuiA996ENxwQUXxGWXXRYPPPDAxPZnnnkmBgcHo7W1dWJdqVSK1atXx6FDh17xmGNjYzEyMjJpAQBmr4ri409/+lPs2LEjLr744njooYfi1ltvjU996lPxve99LyIiBgcHIyKisbFx0s81NjZObPt3W7dujVKpNLE0Nzefyu8BAMwQFcXH+Ph4XH755XHXXXfFZZddFrfcckt84hOfiPvuu++UB+js7Izh4eGJpb+//5SPBQBMfxXFx4UXXhiXXHLJpHUrVqyII0eOREREU1NTREQMDQ1N2mdoaGhi27+rq6uLhoaGSQsAMHtVFB9XXXVVHD58eNK63//+93HRRRdFxEs3nzY1NUVPT8/E9pGRkXj44YejpaVlCsYFAGa6il7tsmXLlnjXu94Vd911V3z4wx+ORx55JO6///64//77IyKiUCjE7bffHl/96lfj4osvjmXLlsUXv/jFWLx4cVx33XVnYn4AYIapKD6uvPLK2LdvX3R2dsZXvvKVWLZsWdxzzz1x4403Tuzz2c9+No4fPx633HJLHD16NK6++uo4cOBAFIvFKR8eAJh5CuVyuVztIf7VyMhIlEqlGB4edv8HzCL/+Mc/Yv369RER0d3dHfX19VWeCJhKlTx/+2wXACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUtVWe4DZqFwux+joaLXHgGnlX/8m/H3AKysWi1EoFKo9xhknPs6A0dHRWL9+fbXHgGlrw4YN1R4BpqXu7u6or6+v9hhnnMsuAEAqZz7OsBfecUOUa/w3Q5TLEeP/fOnrmtqIs+DUMrwWhfF/xrwn/qfaY6TyrHiGlWtqI86ZU+0xYJqYW+0BYNopV3uAKnDZBQBIVVF8fOlLX4pCoTBpWb58+cT20dHRaG9vj0WLFsW8efOira0thoaGpnxoAGDmqvjMx1vf+tZ49tlnJ5Zf//rXE9u2bNkS+/fvj71798bBgwdjYGAgNm7cOKUDAwAzW8X3fNTW1kZTU9N/rB8eHo6dO3fG7t27Y+3atRERsWvXrlixYkX09vbGmjVrTn9aAGDGq/jMx9NPPx2LFy+ON77xjXHjjTfGkSNHIiKir68vTp48Ga2trRP7Ll++PJYuXRqHDh36r8cbGxuLkZGRSQsAMHtVFB+rV6+OBx98MA4cOBA7duyIZ555Jt797nfHsWPHYnBwMObOnRsLFiyY9DONjY0xODj4X4+5devWKJVKE0tzc/Mp/SIAwMxQ0WWXf33XzpUrV8bq1avjoosuih/96Een/I5snZ2d0dHRMfH9yMiIAAGAWey0Xmq7YMGCePOb3xx/+MMfoqmpKU6cOBFHjx6dtM/Q0NAr3iPysrq6umhoaJi0AACz12nFxwsvvBB//OMf48ILL4xVq1bFnDlzoqenZ2L74cOH48iRI9HS0nLagwIAs0NFl10+85nPxDXXXBMXXXRRDAwMxJ133hnnnHNO3HDDDVEqlWLTpk3R0dERCxcujIaGhti8eXO0tLR4pQsAMKGi+Pjzn/8cN9xwQ/z973+P888/P66++uro7e2N888/PyIitm3bFjU1NdHW1hZjY2Oxbt262L59+xkZHACYmSqKjz179rzq9mKxGF1dXdHV1XVaQwEAs5fPdgEAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACDVacXH3XffHYVCIW6//faJdaOjo9He3h6LFi2KefPmRVtbWwwNDZ3unADALHHK8fHoo4/Gd7/73Vi5cuWk9Vu2bIn9+/fH3r174+DBgzEw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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in df.select_dtypes(include=np.number).columns:\n",
    "  sns.boxplot(df[i])\n",
    "  plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d36bc0a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.908500Z",
     "iopub.status.busy": "2025-03-29T17:42:49.908178Z",
     "iopub.status.idle": "2025-03-29T17:42:49.918770Z",
     "shell.execute_reply": "2025-03-29T17:42:49.917826Z"
    },
    "id": "zVxRL1RXsx74",
    "outputId": "44f00d34-38f9-41a2-9762-4257e2b4967a",
    "papermill": {
     "duration": 0.019231,
     "end_time": "2025-03-29T17:42:49.920242",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.901011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(34489.350562499996, -13109.1508975)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# treating outlier with clip method\n",
    "\n",
    "q1=df['charges'].quantile(0.25)\n",
    "q3=df['charges'].quantile(0.75)\n",
    "iqr=q3-q1\n",
    "upper_limit=q3+(1.5*iqr)\n",
    "lower_limit=q1-(1.5*iqr)\n",
    "df['charges']=df['charges'].clip(lower_limit,upper_limit)\n",
    "upper_limit,lower_limit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1e58a448",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:49.934345Z",
     "iopub.status.busy": "2025-03-29T17:42:49.933998Z",
     "iopub.status.idle": "2025-03-29T17:42:50.053919Z",
     "shell.execute_reply": "2025-03-29T17:42:50.052941Z"
    },
    "id": "dnNGynt_tgOO",
    "outputId": "c83a1de8-d863-4092-fdf1-ee1dbfa05121",
    "papermill": {
     "duration": 0.128646,
     "end_time": "2025-03-29T17:42:50.055598",
     "exception": false,
     "start_time": "2025-03-29T17:42:49.926952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['charges'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "be1e3945",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:50.070488Z",
     "iopub.status.busy": "2025-03-29T17:42:50.070177Z",
     "iopub.status.idle": "2025-03-29T17:42:50.082164Z",
     "shell.execute_reply": "2025-03-29T17:42:50.081195Z"
    },
    "id": "0KvCkeQptm24",
    "outputId": "f6fa7e56-739d-4a28-d215-a308617ee319",
    "papermill": {
     "duration": 0.021397,
     "end_time": "2025-03-29T17:42:50.083791",
     "exception": false,
     "start_time": "2025-03-29T17:42:50.062394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(47.290000000000006, 13.7)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# removing outlier\n",
    "\n",
    "q1=df['bmi'].quantile(0.25)\n",
    "q3=df['bmi'].quantile(0.75)\n",
    "iqr=q3-q1\n",
    "upper_limit=q3+(1.5*iqr)\n",
    "lower_limit=q1-(1.5*iqr)\n",
    "# Use df instead of creating a new DataFrame\n",
    "df=df[(df['bmi']>=lower_limit) & (df['bmi']<=upper_limit)] # Changed df_no_outlier to df\n",
    "upper_limit,lower_limit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "80c4b73a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:50.098678Z",
     "iopub.status.busy": "2025-03-29T17:42:50.098338Z",
     "iopub.status.idle": "2025-03-29T17:42:50.214752Z",
     "shell.execute_reply": "2025-03-29T17:42:50.213724Z"
    },
    "id": "ny2zYv7SuiSm",
    "outputId": "1488c405-7f28-4c67-bbf4-9f035e0e19ef",
    "papermill": {
     "duration": 0.125805,
     "end_time": "2025-03-29T17:42:50.216579",
     "exception": false,
     "start_time": "2025-03-29T17:42:50.090774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['bmi'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "88f39ec3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:50.233016Z",
     "iopub.status.busy": "2025-03-29T17:42:50.232628Z",
     "iopub.status.idle": "2025-03-29T17:42:50.246270Z",
     "shell.execute_reply": "2025-03-29T17:42:50.245457Z"
    },
    "id": "Kplkp_x0uljV",
    "outputId": "e2a9f08b-4845-4cd9-a91c-af69608a4147",
    "papermill": {
     "duration": 0.023191,
     "end_time": "2025-03-29T17:42:50.247789",
     "exception": false,
     "start_time": "2025-03-29T17:42:50.224598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  age  sex     bmi  children  smoker  region      charges\n",
       "0      0   19    0  27.900         0       1       3  16884.92400\n",
       "1      1   18    1  33.770         1       0       2   1725.55230\n",
       "2      2   28    1  33.000         3       0       2   4449.46200\n",
       "3      3   33    1  22.705         0       0       1  21984.47061\n",
       "4      4   32    1  28.880         0       0       1   3866.85520"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encoder=LabelEncoder()\n",
    "df['sex']=encoder.fit_transform(df['sex'])\n",
    "df['smoker']=encoder.fit_transform(df['smoker'])\n",
    "df['region']=encoder.fit_transform(df['region'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "63a18e92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:50.263716Z",
     "iopub.status.busy": "2025-03-29T17:42:50.263367Z",
     "iopub.status.idle": "2025-03-29T17:42:50.273262Z",
     "shell.execute_reply": "2025-03-29T17:42:50.272135Z"
    },
    "id": "cFDNaH8wvFh3",
    "outputId": "f1499539-46c3-4c71-dcfc-70cb3c5eaa47",
    "papermill": {
     "duration": 0.019775,
     "end_time": "2025-03-29T17:42:50.275083",
     "exception": false,
     "start_time": "2025-03-29T17:42:50.255308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Datasets : (930, 7) (930,)\n",
      "Test Datasets :  (399, 7) (399,)\n"
     ]
    }
   ],
   "source": [
    "x=df.drop('charges',axis=1)\n",
    "y=df['charges']\n",
    "# Corrected variable assignment\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\n",
    "print(\"Train Datasets :\",x_train.shape,y_train.shape)\n",
    "print(\"Test Datasets : \",x_test.shape,y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "885b7e34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T17:42:50.291379Z",
     "iopub.status.busy": "2025-03-29T17:42:50.291045Z",
     "iopub.status.idle": "2025-03-29T17:42:50.972455Z",
     "shell.execute_reply": "2025-03-29T17:42:50.971151Z"
    },
    "id": "cGkqNPBxvySs",
    "outputId": "7def4eca-3831-43fd-d38c-32a6aed0a543",
    "papermill": {
     "duration": 0.691986,
     "end_time": "2025-03-29T17:42:50.974626",
     "exception": false,
     "start_time": "2025-03-29T17:42:50.282640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2320.697236985957\n",
      "MSE: 19448232.819546867\n",
      "RMSE: 4410.01505887983\n",
      "R2 Score: 0.7972622332660799\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# Initialize the model\n",
    "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "\n",
    "\n",
    "# Train the model on training data\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "# Prediction\n",
    "y_pred = model.predict(x_test)\n",
    "\n",
    "# Model evaluation\n",
    "print(\"MAE:\", mean_absolute_error(y_test, y_pred))\n",
    "print(\"MSE:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"RMSE:\", np.sqrt(mean_squared_error(y_test, y_pred)))\n",
    "print(\"R2 Score:\", r2_score(y_test, y_pred))\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Prediction of Insurance Charges",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2792769,
     "sourceId": 4821176,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.292024,
   "end_time": "2025-03-29T17:42:51.702334",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-29T17:42:43.410310",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
